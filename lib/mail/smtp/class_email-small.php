<?php error_reporting(E_ALL & ~E_NOTICE); ignore_user_abort(true); class email{ public $srv_ret;private $type;private $sender_email;private $sender_name;private $server;private $user;private $pw;private $hostname;private $content_type;private $headers;private $crypto;private $smtp_try;private $server_ehlo;const SLEEP_SOCKET=2000;function __construct() { @set_time_limit(600);$this->server=null;$this->port=null;$this->user=null;$this->pw=null;$this->server_ehlo=array();$this->type=1;$this->hostname=php_uname('n');$this->content_type='text/plain';$this->crypto='starttls';$this->smtp_try=true;$this->set_sender('class_email.php','test@localhost.local');$this->set_headers();} function set_smtp_try($switch=true) { $this->smtp_try=( $switch===false ) ? false:true;} function set_headers( $value=null,$append=false ) { if( $value===null ) { $this->headers="MIME-Version: 1.0\r\n" ."Content-type: $this->content_type; charset=UTF-8; format=flowed\r\n" ."Content-Transfer-Encoding: base64\r\n" ."X-Mailer: class_email.php";}else{ if( $append===false ) $this->headers=$value;else $this->headers.=$value;} } function set_server( $server,$port ) { $this->server=$server;$this->port=$port;} function set_crypto( $type='starttls' ) { $type=strtolower($type);switch ($type) { case 'none':$this->crypto='';break;case 'tls':$this->crypto='tls';break;case 'ssl':$this->crypto='ssl';break;default:$this->crypto='starttls';break;} } function set_auth( $username,$password ) { $this->user=$username;$this->pw=$password;} function set_sender( $name,$email ) { if( $email=='' ) $email='user@localhost.local';if( $name=='' ) $name=$email;$this->sender_email=$email;$this->sender_name='=?UTF-8?B?'.base64_encode($name).'?=';} function set_type( $type=1 ) { $this->type=($type===0) ? 0:1;} function set_content_type( $type='text/plain' ) { if( $type==='text/html' ) $this->content_type='text/html';else $this->content_type='text/plain';} function set_hostname( $hn ) { $this->hostname=$hn;} function mail($to=null,$subject=null,$body=null,$headers=null) { if( $to==null || $subject==null || $body==null ) return false;$this->srv_ret=array( 'last'=> '','all'=> "\n",'full'=> "\n");$subject='=?UTF-8?B?'.base64_encode($subject).'?=';$body=base64_encode($body);if( $headers===null ) $headers=& $this->headers;if($this->type===0 ) return $this->php_mail($to,$subject,$body,$headers);else return $this->smtp_mail($to,$subject,$body,$headers);} private function php_mail(&$to,&$subject,&$body,&$headers) { $tmpheader='From:'.$this->sender_email."\r\n" .'Reply-To:'.$this->sender_email."\r\n" .$headers;if( is_array($to) !==true ){ $send_to=array($to);}else $send_to=& $to;foreach( $send_to as $sto ) { if( @mail($sto,$subject,$body,$tmpheader)==True ){ $this->srv_ret['last']="notice: e-mail for $sto has been delivered using the PHP mail() function.\n";$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].=$this->srv_ret['last']."\n";return true;}else { $err=error_get_last();$this->srv_ret['last']="ERROR: The E-mail was not sent using the PHP mail() function, please check your configuration\n".$err['message'];$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].=$this->srv_ret['last']."\n";return false;} } } private function reorder_array( &$source_array,$first_string ) { $ret=array($first_string);foreach( $source_array as $val ) { if( $val !=$first_string ) $ret[]=$val;} $source_array=$ret;} private function smtp_connect() { if( $this->smtp_try===true ) { $order=array( 'starttls','tls','ssl' );switch($this->crypto){ case 'starttls':$this->reorder_array( $order,'starttls');break;case 'tls':$this->reorder_array( $order,'tls');break;case 'ssl':$this->reorder_array( $order,'ssl');break;case 'none':$this->reorder_array( $order,'none');break;} }else{ $order=array($this->crypto);} foreach( $order as $crypto_type ) { switch($crypto_type){ case 'starttls':$server_type='';$this->set_crypto('starttls');$this->srv_ret['full'].="notice: will attempt to switch to a tls secured connection after EHLO\n";break;case 'tls':$server_type='tls://';$this->set_crypto('tls');$this->srv_ret['full'].="notice: will create a tls secured connection to your server\n";break;case 'ssl':$server_type='ssl://';$this->set_crypto('ssl');$this->srv_ret['full'].="notice: will create a SSL secured connection to your server\n";break;case 'none':$server_type='';$this->set_crypto('none');$this->srv_ret['full'].="WARNING: your connection will NOT be encrypted! Please consider a different configuration!\n";break;default:$this->srv_ret['full'].="ERROR: Invalid crypto type: $crypto_type\n";return false;} if( !($socket=@fsockopen($server_type.$this->server,$this->port,$errno,$errstr,5)) ) { if( $errno==10060 ) { $this->srv_ret['last']='ERROR: Unable to connect to SMTP server '.$server_type.$this->server.'. Please check the URL and the port setting. ('.$errstr.')';$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].=$this->srv_ret['last']."\n";}else{ $this->srv_ret['last']='ERROR: Unable to connect to SMTP server '.$server_type.$this->server.' ('.$errstr.')';$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].=$this->srv_ret['last']."\n";} if( $this->smtp_try===false ) return false;}else{ $ret=$this->server_parse($socket);$this->srv_ret['last']=trim($ret);$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].="notice: connected to server\nrecieved: ".$this->srv_ret['last']."\n";if( $this->expected_return($ret,'220') !==true ) {return false;} return $socket;} $server_type='';unset($socket);} $this->srv_ret['last']="ERROR: All connection attempts failed! Please check your configuration. Aborting\n";$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].=$this->srv_ret['last']."\n";return false;} private function smtp_auth(&$socket) { if ($this->user !='' && $this->pw !='' ) { if( strstr($this->server_ehlo['auth'],'PLAIN') ) { fwrite($socket,'AUTH PLAIN '.base64_encode("\0".$this->user."\0".$this->pw)."\r\n");$ret=$this->server_parse($socket);$this->srv_ret['last']=trim($ret);$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].="sent: AUTH PLAIN ".base64_encode("\0".$this->user."\0".$this->pw)."\nreceived: ".$this->srv_ret['last']."\n";if( $this->expected_return($ret,'334') !==true && $this->expected_return($ret,'235') !==true ) {return false;} }elseif( strstr($this->server_ehlo['auth'],'CRAM-MD5') ) { fwrite($socket,'AUTH CRAM-MD5'."\r\n");$ret=$this->server_parse($socket);$this->srv_ret['last']=trim($ret);$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].="sent: AUTH CRAM-MD5\nreceived: ".$this->srv_ret['last']."\n";if( $this->expected_return($ret,'334') !==true && $this->expected_return($ret,'235') !==true ) {return false;} $ret=explode(' ',$ret);$key=base64_decode($ret[1]);$send=$this->user." ".$this->_hmacMd5($this->pw,$key);fwrite($socket,base64_encode($send)."\r\n");$ret=$this->server_parse($socket);$this->srv_ret['last']=trim($ret);$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].="sent base64 string:".base64_encode($send)."\nreceived: ".$this->srv_ret['last']."\n";if( $this->expected_return($ret,'235') !==true ) {return false;} unset($send);}elseif( strstr($this->server_ehlo['auth'],'LOGIN') ){ fwrite($socket,'AUTH LOGIN'."\r\n");$ret=$this->server_parse($socket);$this->srv_ret['last']=trim($ret);$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].="sent: AUTH LOGIN\nreceived: ".$this->srv_ret['last']."\n";if( $this->expected_return($ret,'334') !==true ) {return false;} fwrite($socket,base64_encode($this->user)."\r\n");$ret=$this->server_parse($socket);$this->srv_ret['last']=trim($ret);$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].="sent base64 username:".base64_encode($this->user)."\nreceived: ".$this->srv_ret['last']."\n";if( $this->expected_return($ret,'334') !==true ) {return false;} fwrite($socket,base64_encode($this->pw)."\r\n");$ret=$this->server_parse($socket);$this->srv_ret['last']=trim($ret);$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].="sent base64 password:".base64_encode($this->pw)."\nreceived: ".$this->srv_ret['last']."\n";if( $this->expected_return($ret,'334') !==true && $this->expected_return($ret,'235') !==true ) {return false;} }else{ $this->srv_ret['full'].="ERROR: class_email.php is unable to find a supported authentication method. Please contact support!\nreceived: ".$this->srv_ret['last']."\n";return false;} }else{ $this->srv_ret['last']="WARNING: You did not specify a username or password. This notice is here to remind you that this is most likely as mistake and may cause errors when sending your message.\n";$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].=$this->srv_ret['last']."\n";} return true;} private function smtp_mail(&$to,&$subject,&$body,&$headers) { $smtp_ret='';$server_type='';$socket=$this->smtp_connect();if( $socket===false ) return false;$hn=( strlen($this->hostname) > 0 ) ? $this->hostname:'localhost';fwrite($socket,'EHLO '.$hn."\r\n");$ret='';$ret=$this->server_parse($socket);$this->srv_ret['last']=trim($ret);$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].="sent: EHLO $hn\nreceived: ".$this->srv_ret['last']."\n";if( $this->expected_return($ret,'250') !==true ) {return false;} $this->parse_ehlo($ret);if( $this->crypto==='starttls' ) { if( $this->server_ehlo['starttls']===true ) { fwrite($socket,"STARTTLS\r\n");$ret='';$ret=$this->server_parse($socket);$this->srv_ret['last']=trim($ret);$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].="sent: STARTTLS\nreceived: ".$this->srv_ret['last']."\n";if( $this->expected_return($ret,'220') !==true ) {return false;} stream_set_blocking ($socket,true);if( !@stream_socket_enable_crypto ($socket,true,STREAM_CRYPTO_METHOD_TLS_CLIENT) ) return false;stream_set_blocking ($socket,false);$this->srv_ret['full'].="notice: tls is now enabled\n";fwrite($socket,'EHLO '.$hn."\r\n");$ret='';$ret=$this->server_parse($socket);$this->srv_ret['last']=trim($ret);$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].="notice: sending EHLO again but this time encrypted\n";$this->srv_ret['full'].="sent: EHLO $hn\nreceived: ".$this->srv_ret['last']."\n";if( $this->expected_return($ret,'250') !==true ) {return false;} $this->parse_ehlo($ret);}else $this->srv_ret['full'].="WARNING: server does not appear to support STARTTLS\n";} if( $this->smtp_auth($socket)===false ) return false;while(true) { if( is_array($to)===true ){ $send_to=array_shift($to);}else $send_to=& $to;fwrite($socket,'MAIL FROM:<'.$this->sender_email.'>'."\r\n");$ret=$this->server_parse($socket);$this->srv_ret['last']=trim($ret);$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].="sent: MAIL FROM:<$this->sender_email>\nreceived: ".$this->srv_ret['last']."\n";if( $this->expected_return($ret,'250') !==true ) {return false;} fwrite($socket,'RCPT TO:<'.$send_to.'>'."\r\n");$ret=$this->server_parse($socket);$this->srv_ret['last']=trim($ret);$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].="sent: RCPT TO:<$send_to>\nreceived: ".$this->srv_ret['last']."\n";if( $this->expected_return($ret,'250') !==true ) {return false;} fwrite($socket,'DATA'."\r\n");$ret=$this->server_parse($socket);$this->srv_ret['last']=trim($ret);$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].="sent: DATA\nreceived: ".$this->srv_ret['last']."\n";if( $this->expected_return($ret,'354') !==true ) {return false;} fwrite($socket,"FROM:$this->sender_name <$this->sender_email>\r\nSubject: $subject\r\nTO: $send_to\r\n$headers\r\n\r\n$body\r\n");fwrite($socket,".\r\n");$ret=$this->server_parse($socket);$this->srv_ret['last']=trim($ret);$this->srv_ret['all'].=$this->srv_ret['last']."\n";$this->srv_ret['full'].="sent: FROM:$this->sender_name <$this->sender_email>\r\nSubject: $subject\r\nTO: $send_to\r\n$headers\r\n\r\n$body\r\n\nreceived: ".$this->srv_ret['last']."\n";if( $this->expected_return($ret,'250') !==true ) {return false;} if( is_array($to) !==true || count($to)===0 ) break;} fwrite($socket,'QUIT'."\r\n");$this->srv_ret['full'].="sent: QUIT\n";fclose($socket);$this->srv_ret['full'].="notice: connection closed, return true\n";return true;} private function parse_ehlo( &$string ) { $this->server_ehlo['hostname']='';$this->server_ehlo['starttls']=false;$this->server_ehlo['auth']='';$this->server_ehlo['size']=0;$ar=$this->eol($string);$ar=explode("\n",$ar);$tmp=explode(' ',$ar[0]);$this->server_ehlo['hostname']=trim(substr($tmp[0],4));foreach( $ar as $val ) { if(strstr($val,'250-STARTTLS') !==false) $this->server_ehlo['starttls']=true;if(strstr($val,'250-AUTH') !==false) $this->server_ehlo['auth']=trim(substr($val,8));if(strstr($val,'250-SIZE') !==false) $this->server_ehlo['size']=trim(substr($val,8));} } private function eol($string) { $string=str_replace("\r\n","\r",$string);$string=str_replace("\r","\n",$string);return $string;} private function expected_return($string,$val) { $this->srv_ret['full'].="notice: checking expected:$val against response:".substr($string,0,3);if( substr($string,0,3)==$val ){ $this->srv_ret['full'].=" -- PASSED!\n";return true;}else{ $this->srv_ret['full'].=" -- FAILED!\n";return false;} } private function _hmacMd5($key,$data,$block=64) { if (strlen($key) > 64) { $key=pack('H32',md5($key));} elseif (strlen($key) < 64) { $key=str_pad($key,$block,chr(0));} $k_ipad=substr($key,0,64) ^ str_repeat(chr(0x36),64);$k_opad=substr($key,0,64) ^ str_repeat(chr(0x5C),64);$inner=pack('H32',md5($k_ipad.$data));$digest=md5($k_opad.$inner);return $digest;} private function server_parse(&$socket) { $server_response='';$ret='';$x=0;while( substr($server_response,3,1) !=' ' ) { $server_response=fgets($socket,4096);$ret.=$server_response;usleep(self::SLEEP_SOCKET);++$x;if( $x===10000 ) { $this->srv_ret['full'].="ERROR: The script timed out while waiting for the smtp server to respond. One of the servers may be having connection difficulties or is overloaded ... try again later.\n";return false;} } return $ret;} } ?>
